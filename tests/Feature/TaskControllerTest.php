<?php

namespace Tests\Feature;

use App\Task;
use Carbon\Carbon;
use Illuminate\Support\Facades\Session;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TaskControllerTest extends TestCase
{
    use WithFaker;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Session::start();
    }

    public function testIndexTodo()
    {
        $response = $this->get('/api/tasks?done=false');

        $response->assertStatus(200);
        $content = json_decode($response->content());

        $this->assertTrue(isset($content->data));
        $tasks = $content->data;

        $this->assertTrue(is_array($tasks));
        $this->assertGreaterThan(0, count($tasks));
    }

    public function testIndexDone()
    {
        $response = $this->get('/api/tasks?done=true');

        $response->assertStatus(200);
        $content = json_decode($response->content());

        $this->assertTrue(isset($content->data));
        $tasks = $content->data;

        $this->assertTrue(is_array($tasks));
        $this->assertGreaterThan(0, count($tasks));
    }

    public function testUpdate()
    {
        $task = Task::firstOrFail();
        $todo = $task->todo;
        $deadline = $task->deadline->toDateString();
        $task->todo = $this->faker->sentence;
        $task->deadline = new Carbon($this->faker->date);

        $response = $this->put("/api/tasks/$task->id", array_merge(
            $task->toArray(), ['_token' => csrf_token()]
        ));

        $response->assertStatus(200);
        $content = json_decode($response->content());

        $this->assertTrue(isset($content->data));
        $updatedTask = $content->data;

        $this->assertEquals($task->todo, $updatedTask->todo);
        $this->assertEquals($task->deadline->toDateString(), $updatedTask->deadline);
        $this->assertNotEquals($todo, $updatedTask->todo);
        $this->assertNotEquals($deadline, $updatedTask->deadline);
    }

    public function testCreate()
    {
        $response = $this->post('/api/tasks', [
            'todo' => $this->faker->sentence,
            'deadline' => $this->faker->date,
            'priority' => $this->faker->numberBetween(0, 3),
            'done' => $this->faker->boolean,
            '_token' => csrf_token(),
        ]);

        $response->assertStatus(200);
        $content = json_decode($response->content());

        $this->assertTrue(isset($content->data));
        $task = $content->data;

        $this->assertTrue(isset($task->id));
        $this->assertGreaterThan(0, $task->id);
    }
}
